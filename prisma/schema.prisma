// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Field {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  crop         String
  plantedAt    DateTime?
  locationName String        @default("Not Set")
  
  // Store latitude and longitude as separate fields for easier querying
  latitude     Float?
  longitude    Float?

  threadId     String?       @unique // OpenAI Assistant thread ID

  // Timestamps
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relation: A field can have many chat messages
  messages     ChatMessage[]

  actions      FieldAction[]
}

model FieldAction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String   // e.g., "Watered", "Fertilized"
  date      DateTime // The date the action was performed
  createdAt DateTime @default(now())

  // Relation: Each action belongs to one field
  field     Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   String   @db.ObjectId
}

// Model for a single chat message
model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      String   // "user", "assistant", or "system"
  content   String
  createdAt DateTime @default(now())

  // Relation: Each message belongs to one field
  field     Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   String   @db.ObjectId
}


model Goal {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  isGenerating Boolean         @default(true)
  isGenerated  Boolean         @default(false)
  color        String
  createdAt    DateTime        @default(now())
  checklist    ChecklistItem[]
}

model ChecklistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  completed Boolean  @default(false)
  priority  String   // "low" | "medium" | "high"
  goalId    String   @db.ObjectId
  goal      Goal     @relation(fields: [goalId], references: [id])
}